<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- The <annotation-driven> tag enables the support of annotation configuration 
		for Spring MVC controllers, as well as enabling Spring type conversion and 
		formatting support. -->
	<annotation-driven />

	<!-- The <resources> tag defines the static resources (for example, CSS, 
		JavaScript, and images) and their locations so Spring MVC can improve the 
		performance in serving those files. -->
	<resources location="/, classpath:/META-INF/web-resources/"
		mapping="/resources/**" />

	<default-servlet-handler />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		id="tilesViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
	</beans:bean>

	<beans:bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"
		id="tilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
				<beans:value>/WEB-INF/views/**/tiles-definitions.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>


	<interceptors>
		<!-- this class intercepts every request for changing the theme. -->
		<beans:bean
			class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
		<!-- LocaleChangeInterceptor is defined, which intercepts all the requests 
			to the DispatcherServlet. The interceptor supports locale switching with 
			a configurable request parameter. From the interceptor configuration, the 
			URL param with the name lang is defined for changing the locale for the application -->
		<beans:bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="lang" />
	</interceptors>

	<!-- ReloadableResourceBundleMessageSource class implements the MessageSource 
		interface, which loads the messages from the defined files (in this case, 
		it’s the messages*.properties and application*.properties in the /WEB-INF/i18n 
		folder) in supporting i18n. Note the property fallbackToSystemLocale. This 
		property instructs Spring MVC whether to fall back to the locale of the system 
		that the application is running on when a special resource bundle for the 
		client locale isn’t found. -->
	<beans:bean
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
		p:fallbackToSystemLocale="true" />

	<!-- This class supports the storage and retrieval of locale settings from 
		the user browser’s cookie. -->
	<beans:bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		id="localeResolver" p:cookieName="locale" />


	<beans:bean
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"
		id="themeSource" />
	<beans:bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
		id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard" />
	<beans:bean
			class="org.springframework.web.multipart.support.StandardServletMultipartResolver"
			id="multipartResolver" >
	</beans:bean>

	<context:component-scan base-package="com.epam.training.shop.storefront" />

</beans:beans>
